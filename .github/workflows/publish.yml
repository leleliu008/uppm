name: publish uppm

on:
  workflow_dispatch:

jobs:

  check:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: 0.15.1

      - id:  check-if-has-new-commit
        run: |
          cat > QUERY <<EOF
          {
            repository(owner: "leleliu008", name: "uppm") {
                latestRelease {
                  name
                }
            }
          }
          EOF

          LATEST_RELEASE_GIT_SHA="$(gh api graphql -f "query=$(cat QUERY)" --jq .data.repository.latestRelease.name | cut -d+ -f2)"

          printf 'LATEST_RELEASE_GIT_SHA=%s\n' "$LATEST_RELEASE_GIT_SHA"

          CURRENT_SOURCE_GIT_SHA="$(git rev-parse HEAD)"

          printf 'CURRENT_SOURCE_GIT_SHA=%s\n' "$CURRENT_SOURCE_GIT_SHA"

          if [ "$LATEST_RELEASE_GIT_SHA" = "$CURRENT_SOURCE_GIT_SHA" ] ; then
              printf 'HAS_NEW_COMMIT=no\n'        >> "$GITHUB_OUTPUT"
          else
              printf 'HAS_NEW_COMMIT=yes\n'       >> "$GITHUB_OUTPUT"
          fi

          printf 'GIT_SHA=%s\n' "$CURRENT_SOURCE_GIT_SHA" >> "$GITHUB_OUTPUT"

    outputs:
      if-has-new-commit: ${{ steps.check-if-has-new-commit.outputs.HAS_NEW_COMMIT }}
      git-sha:           ${{ steps.check-if-has-new-commit.outputs.GIT_SHA }}


  bsd:
    needs: [check]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # https://ftp.netbsd.org/pub/NetBSD/
        # https://cdn.openbsd.org/pub/OpenBSD/
        # https://archive.freebsd.org/old-releases/amd64/
        target: ['netbsd-9.1-amd64', 'netbsd-9.2-amd64', 'netbsd-9.3-amd64', 'freebsd-13.2-amd64', 'freebsd-13.1-amd64', 'freebsd-13.0-amd64']

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
      - run: chmod a+x ppkg

      - run: ./ppkg setup
      - run: ./ppkg update

      - run: |
          ~/.uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/official-core/formula/uppm.yml

      - if:  ${{ startsWith(matrix.target, 'openbsd') }}
        run: ./ppkg install ${{ matrix.target }}/uppm --link-type=static-most

      - if:  ${{ ! startsWith(matrix.target, 'openbsd') }}
        run: ./ppkg install ${{ matrix.target }}/uppm --link-type=static-full

      - run: ./ppkg pack ${{ matrix.target }}/uppm -t tar.gz
      - run: ./ppkg pack ${{ matrix.target }}/uppm -t tar.xz
      - run: ./ppkg pack ${{ matrix.target }}/uppm -t tar.lz
      - run: ./ppkg pack ${{ matrix.target }}/uppm -t tar.bz2

      - uses: actions/upload-artifact@v4
        with:
          name: uppm---${{ matrix.target }}-tar
          path: uppm-*-${{ matrix.target }}.tar.*


  macos:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-14

    strategy:
      fail-fast: false
      matrix:
        target-version: ['10.15', '11.0', '12.0', '13.0', '14.0']
        target-arch: [x86_64, arm64]

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/xcpkg/master/xcpkg
      - run: chmod a+x xcpkg

      - run: ./xcpkg setup
      - run: ./xcpkg update

      - run: |
          ~/.xcpkg/uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.xcpkg/repos.d/official-core/formula/uppm.yml

      - run: ./xcpkg install MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}/uppm --link-type=static-most

      - run: ./xcpkg pack    MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}/uppm -t tar.gz
      - run: ./xcpkg pack    MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}/uppm -t tar.xz
      - run: ./xcpkg pack    MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}/uppm -t tar.lz
      - run: ./xcpkg pack    MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}/uppm -t tar.bz2

      - uses: actions/upload-artifact@v4
        with:
          name: uppm---MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}-tar
          path: uppm-*-MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}.tar.*


  linux:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    strategy:
      fail-fast: false
      matrix:
        target-arch: [x86_64, aarch64, ppc64le, riscv64, s390x]

    runs-on: ubuntu-latest

    steps:
      - run: |
          cat > run.sh <<EOF
          set -e

          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          echo() {
              printf '%b\n' "\$*"
          }

          run() {
              echo "\${COLOR_PURPLE}==>\${COLOR_OFF} \${COLOR_GREEN}\$@\${COLOR_OFF}"
              eval "\$*"
          }

          run uname -a

          run apk update
          run apk add g++ libc-dev linux-headers

          run wget https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
          run chmod a+x ppkg
          run ./ppkg setup
          run ./ppkg update

          sed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/official-core/formula/uppm.yml

          run ./ppkg install uppm --link-type=static-full

          run ./ppkg pack    uppm -t tar.gz
          run ./ppkg pack    uppm -t tar.xz
          run ./ppkg pack    uppm -t tar.lz
          run ./ppkg pack    uppm -t tar.bz2
          EOF

          chmod +x run.sh

      - name: start container
        run: |
          set -x

          targetArch=${{ matrix.target-arch }}

          case $targetArch in
            x86_64)  IMAGE=alpine ;;
            aarch64) IMAGE=arm64v8/alpine ;;
            *)       IMAGE=${{ matrix.target-arch }}/alpine ;;
          esac

          if [ ${{ matrix.target-arch }} != x86_64 ] ; then
            # https://github.com/multiarch/qemu-user-static
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi

          docker run -v $PWD:$PWD -w $PWD $IMAGE sh run.sh

      - run: ls

      - uses: actions/upload-artifact@v4
        with:
          name: uppm---linux-${{ matrix.target-arch }}-tar
          path: uppm-*-linux-${{ matrix.target-arch }}.tar.*


  publish:
    needs: [check, bsd, macos, linux]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: .
          merge-multiple: true

      - run: ls -a

      - run: |
          printf 'build-from: https://github.com/leleliu008/uppm/tree/%s\n\n' ${{ needs.check.outputs.git-sha }} > notes.md
          printf 'sha256sum:\n```\n%s\n```\n' "$(sha256sum uppm-*.tar.*)" >> notes.md

          VERSION="$(ls uppm-*-linux-x86_64.tar.xz | cut -d- -f2)"
          TAGNAME="$VERSION+${{ needs.check.outputs.git-sha }}"

          # to avaid: failed to run git: fatal: not a git repository (or any of the parent directories): .git
          git -c init.defaultBranch=master init
          git remote add origin ${{ github.repositoryUrl }}

          gh release create "$TAGNAME" uppm-*.tar.* --title "$TAGNAME" --notes-file notes.md
